консольное многопользовательское клиент-серверное
 приложение, которое реализует управление коллекцией объектов в интерактивном режиме.

 Клиентский модуль должен запросить логин и пароль пользователя, отправить их на сервер для аутентификации, и разрешить или запретить доступ пользователю в зависимости от ответа сервера. При успешном логине клиентский модуль должен в интерактивном режиме считывать команды пользователя, передавать их для выполнения на сервер и выводить результаты выполнения пользователю. Объекты между клиентом и сервером должны передаваться в сериализованном виде. Клиент должен корректно обрабатывать временную недоступность сервера. Команда exit завершает работу клиентского приложения. Должно поддерживаться одновременное подключение к серверу нескольких клиентов.

 Серверный модуль должен осуществлять управление коллекцией, принимать запросы от клиентского модуля и отправлять ответы.
 Актуальная копия коллекции хранится в файле в указанном в варианте формате.
 При запуске сервер считывает данные из файла, при любом обновлении коллекции файл должен обновляться.
 Обработка запросов от клиента на сервере должна осуществляться в многопоточном режиме.
 Операции обработки объектов коллекции должны быть реализованы с помощью Stream API с использованием лямбда-выражений.
 Серверное приложение должно состоять из следующих модулей (реализованных в виде одного или нескольких классов):
 - Модуль приёма подключений
 - Модуль чтения запроса
 - Модуль обработки полученных команд
 - Модуль отправки ответов клиенту

Формат ввода команд:

- Все аргументы команды, являющиеся стандартными типами данных (примитивные типы, классы-оболочки, String, классы для хранения дат), должны вводиться в той же строке, что и имя команды.
- Все составные типы данных (объекты классов, хранящиеся в коллекции) должны вводиться по одному полю в строку.
- При вводе составных типов данных пользователю должно показываться приглашение к вводу, содержащее имя поля (например, "Введите дату рождения:")
- Если поле является enum'ом, то вводится имя одной из его констант (при этом список констант должен быть предварительно выведен).
- При некорректном пользовательском вводе (введена строка, не являющаяся именем константы в enum'е; введена строка вместо числа; введённое число не входит в указанные границы и т.п.) должно быть показано сообщение об ошибке и предложено повторить ввод поля.
- Для ввода значений null использовать пустую строку.
- Поля с комментарием "Значение этого поля должно генерироваться автоматически" не должны вводиться пользователем вручную при добавлении.

В коллекции необходимо хранить объекты классов, заданных в варианте для задания 5.

Сетевой обмен между клиентом и сервером производится в соответствии с вариантом для задания 6.

Многопоточность реализуется по условиям, указанным в варианте для задания 7.

________________________________________________________________

 Написать на Java консольное многопользовательское клиент-серверное
 приложение, которое реализует управление коллекцией объектов в интерактивном режиме.

 Клиентский модуль должен запросить логин и пароль пользователя, отправить их на сервер для аутентификации, и разрешить или запретить доступ пользователю в зависимости от ответа сервера. При успешном логине клиентский модуль должен в интерактивном режиме считывать команды пользователя, передавать их для выполнения на сервер и выводить результаты выполнения пользователю. Объекты между клиентом и сервером должны передаваться в сериализованном виде. Клиент должен корректно обрабатывать временную недоступность сервера. Команда exit завершает работу клиентского приложения. Должно поддерживаться одновременное подключение к серверу нескольких клиентов.

 Серверный модуль должен осуществлять управление коллекцией, принимать запросы от клиентского модуля и отправлять ответы.
 Актуальная копия коллекции хранится в файле в указанном в варианте формате.
 При запуске сервер считывает данные из файла, при любом обновлении коллекции файл должен обновляться.
 Сервер должен поддерживать одновременную работу с несколькими клиентами.
 Сервер должен разрешать всем пользователям просматривать информацию обо всех объектах в коллекции,
 но модификацию и удаление конкретного объекта следует разрешать только создавшему объект пользователю.
 Сервер должен позволять клиентам добавлять, удалять и модифицировать элементы коллекции.
 Обработка запросов от клиента на сервере должна осуществляться в многопоточном режиме.
 Операции обработки объектов коллекции должны быть реализованы с помощью Stream API с использованием лямбда-выражений.
 Серверное приложение должно состоять из следующих модулей (реализованных в виде одного или нескольких классов):
 - Модуль приёма подключений
 - Модуль чтения запроса
 - Модуль обработки полученных команд
 - Модуль отправки ответов клиенту

Формат ввода команд:

- Все аргументы команды, являющиеся стандартными типами данных (примитивные типы, классы-оболочки, String, классы для хранения дат), должны вводиться в той же строке, что и имя команды.
- Все составные типы данных (объекты классов, хранящиеся в коллекции) должны вводиться по одному полю в строку.
- При вводе составных типов данных пользователю должно показываться приглашение к вводу, содержащее имя поля (например, "Введите дату рождения:")
- Если поле является enum'ом, то вводится имя одной из его констант (при этом список констант должен быть предварительно выведен).
- При некорректном пользовательском вводе (введена строка, не являющаяся именем константы в enum'е; введена строка вместо числа; введённое число не входит в указанные границы и т.п.) должно быть показано сообщение об ошибке и предложено повторить ввод поля.
- Для ввода значений null использовать пустую строку.
- Поля с комментарием "Значение этого поля должно генерироваться автоматически" не должны вводиться пользователем вручную при добавлении.

В коллекции необходимо хранить объекты классов, заданных в варианте для задания 5.

Сетевой обмен между клиентом и сервером производится в соответствии с вариантом для задания 6.

Многопоточность реализуется по условиям, указанным в варианте для задания 7.